{
  "pipes": [],
  "interfaces": [
    {
      "name": "AppState",
      "id": "interface-AppState-caa2d8e14c261268b7feca6b76d02a3f",
      "file": "src/app/core/core.state.ts",
      "type": "interface",
      "sourceCode": "import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { SettingsState } from './settings/settings.state';\nimport { settingsReducer } from './settings/settings.reducer';\nimport { SettingsEffects } from './settings/settings.effects';\n\nexport const coreReducers: ActionReducerMap<AppState> = {\n  settings: settingsReducer\n};\n\nexport const coreEffects = [SettingsEffects];\n\nexport const metaReducers: MetaReducer<AppState>[] = [];\n\nexport interface AppState {\n  settings: SettingsState;\n}\n",
      "properties": [
        {
          "name": "settings",
          "type": "SettingsState",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "Post",
      "id": "interface-Post-2dfbb1f819143cbe4dd99d8c243fb68f",
      "file": "projects/models/src/lib/posts.ts",
      "type": "interface",
      "sourceCode": "export interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n",
      "properties": [
        {
          "name": "body",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "id",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "userId",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "PostState",
      "id": "interface-PostState-ec1af53e83ed28ef105e3de046b4b90c",
      "file": "src/app/features/posts/state/posts.state.ts",
      "type": "interface",
      "sourceCode": "import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { Post } from 'models';\n\nexport interface PostState extends EntityState<Post> {\n  loaded: boolean;\n  loading: boolean;\n  error: any;\n}\n\nexport const PostAdapter: EntityAdapter<Post> = createEntityAdapter<Post>({\n  selectId: (post: Post) => post.id,\n  sortComparer: false\n});\n\nexport const PostInitialState: PostState = PostAdapter.getInitialState({\n  loaded: false,\n  loading: false,\n  error: null\n});\n",
      "properties": [
        {
          "name": "error",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "loaded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "loading",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "extends": "EntityState"
    },
    {
      "name": "SettingsState",
      "id": "interface-SettingsState-e7b1df3bd3dedbd2109a8523334c0889",
      "file": "src/app/core/settings/settings.state.ts",
      "type": "interface",
      "sourceCode": "import { AppState } from '../core.state';\n\nexport interface SettingsState {\n  theme: string;\n}\n\nexport const initialState: SettingsState = {\n  theme: 'light-theme'\n};\n\nexport interface State extends AppState {\n  settings: SettingsState;\n}\n",
      "properties": [
        {
          "name": "theme",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "State",
      "id": "interface-State-e7b1df3bd3dedbd2109a8523334c0889",
      "file": "src/app/core/settings/settings.state.ts",
      "type": "interface",
      "sourceCode": "import { AppState } from '../core.state';\n\nexport interface SettingsState {\n  theme: string;\n}\n\nexport const initialState: SettingsState = {\n  theme: 'light-theme'\n};\n\nexport interface State extends AppState {\n  settings: SettingsState;\n}\n",
      "properties": [
        {
          "name": "settings",
          "type": "SettingsState",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "extends": "AppState"
    }
  ],
  "injectables": [
    {
      "name": "ComponentsService",
      "id": "injectable-ComponentsService-b7227a2afcbe83ba2f5742aac484e6d1",
      "file": "projects/components/src/lib/components.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n  constructor() { }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 6
      },
      "type": "injectable"
    },
    {
      "name": "LoadedClanEffects",
      "id": "injectable-LoadedClanEffects-40a66e728b8728d4e75613d5d50a3e5c",
      "file": "src/app/features/posts/state/posts.effects.ts",
      "properties": [
        {
          "name": "retrievePosts",
          "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadPosts),\n      switchMap(() => {\n        return this.postService.getPosts().pipe(\n          map((posts) => loadPostsSuccess({ posts: posts as Post[] })),\n          catchError((error) => of(loadPostsFailure({ error })))\n        );\n      })\n    )\n  )",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { PostsService } from 'data';\nexport const LOADED_CLANS_KEY = 'clanSearch.loadedClans';\nimport { PostState } from './posts.state';\nimport { loadPosts, loadPostsSuccess, loadPostsFailure } from './posts.actions';\nimport { catchError, switchMap, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { Post } from 'models';\n\n@Injectable()\nexport class LoadedClanEffects {\n  constructor(private actions$: Actions, private store: Store<PostState>, private postService: PostsService) {}\n\n  retrievePosts = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadPosts),\n      switchMap(() => {\n        return this.postService.getPosts().pipe(\n          map((posts) => loadPostsSuccess({ posts: posts as Post[] })),\n          catchError((error) => of(loadPostsFailure({ error })))\n        );\n      })\n    )\n  );\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions"
          },
          {
            "name": "store",
            "type": "Store<PostState>"
          },
          {
            "name": "postService",
            "type": "PostsService"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store<PostState>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "postService",
            "type": "PostsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PostsService",
      "id": "injectable-PostsService-1257266642944cca8c2a88babedaf547",
      "file": "projects/data/src/lib/posts/posts.service.ts",
      "properties": [
        {
          "name": "BASE_URL",
          "defaultValue": "'https://jsonplaceholder.typicode.com/'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "getPosts",
          "args": [],
          "optional": false,
          "returnType": "Observable<object>",
          "typeParameters": [],
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n@Injectable()\nexport class PostsService {\n  // * INFO:  This could/should be a config value\n  private BASE_URL = 'https://jsonplaceholder.typicode.com/';\n  constructor(private httpClient: HttpClient) {}\n\n  public getPosts(): Observable<object> {\n    return this.httpClient.get(`${this.BASE_URL}posts`);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "httpClient",
            "type": "HttpClient"
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "httpClient",
            "type": "HttpClient",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "SettingsEffects",
      "id": "injectable-SettingsEffects-b09c1e2909fdb8c64a83ff0af853fd37",
      "file": "src/app/core/settings/settings.effects.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { State } from './settings.state';\n\n@Injectable()\nexport class SettingsEffects {\n  constructor(private actions$: Actions, private store: Store<State>) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions"
          },
          {
            "name": "store",
            "type": "Store<State>"
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store<State>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "classes": [
    {
      "name": "AppPage",
      "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
      "file": "e2e/src/app.po.ts",
      "type": "class",
      "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "getTitleText",
          "args": [],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 8
        },
        {
          "name": "navigateTo",
          "args": [],
          "optional": false,
          "returnType": "Promise<unknown>",
          "typeParameters": [],
          "line": 4
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-c8853ae8ff496fb9d4f49e82847807aa",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "theme$",
          "defaultValue": "this.store.pipe(select(selectEffectiveTheme))",
          "type": "Observable<string>",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "title",
          "defaultValue": "'angular-starter-project'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { routeAnimations } from './core/animations/route.animations';\nimport { selectEffectiveTheme } from './core/settings/settings.selectors';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  animations: [routeAnimations]\n})\nexport class AppComponent {\n  title = 'angular-starter-project';\n  theme$: Observable<string> = this.store.pipe(select(selectEffectiveTheme));\n\n  constructor(private store: Store) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".main-nav {\n  padding-top: 0;\n}\n",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "store",
            "type": "Store"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<div  [class]=\"(theme$ | async)\">\n  <lib-page-layout>\n    <div sideBar>\n      <mat-nav-list class=\"main-nav\">\n        <div class=\"section-nav\">\n          <a mat-list-item routerLink=\"./\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n            Home\n          </a>\n          <a mat-list-item routerLink=\"posts\" routerLinkActive=\"active-link\">\n            Posts\n          </a>\n        </div>\n      </mat-nav-list>\n    </div>\n    <div [@routeAnimations]=\"o.isActivated ? o.activatedRoute : ''\">\n      https://jsonplaceholder.typicode.com/\n      <router-outlet #o=\"outlet\"></router-outlet>\n    </div>\n  </lib-page-layout>\n</div>\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "description": "<p>What background color to use</p>\n",
          "line": 26,
          "type": "string"
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "description": "<p>Button contents</p>\n",
          "line": 40
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 20
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "description": "<p>How large should the button be?</p>\n",
          "line": 32,
          "type": "\"small\" | \"medium\" | \"large\""
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "description": "<p>Optional click handler</p>\n",
          "line": 46,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 48
          }
        }
      }
    },
    {
      "name": "ComponentsComponent",
      "id": "component-ComponentsComponent-0fc0afe072720450fbb3c656c0453900",
      "file": "projects/components/src/lib/components.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "lib-components",
      "styleUrls": [],
      "styles": [],
      "template": "<p>\n  components works!\n</p>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-components',\n  template: `\n    <p>\n      components works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ComponentsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 13
      },
      "implements": ["OnInit"]
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "line": 53,
          "type": "unknown"
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 62,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 56,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 59,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "HomeComponent",
      "id": "component-HomeComponent-3daf427e535787f8f9e1143a46352651",
      "file": "src/app/features/home/home.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-home",
      "styleUrls": ["./home.component.scss"],
      "styles": [],
      "templateUrl": ["./home.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 11
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n  ngOnInit(): void {\n  }\n\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./home.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<p>home works!</p>\n"
    },
    {
      "name": "NavbarComponent",
      "id": "component-NavbarComponent-c4e473b1238f57f8e2314eb736d5c867",
      "file": "projects/components/src/lib/core/navbar/navbar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "lib-navbar",
      "styleUrls": ["./navbar.component.scss"],
      "styles": [],
      "templateUrl": ["./navbar.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./navbar.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<mat-toolbar color=\"primary\">\n  <mat-toolbar-row>\n    <div class=\"site-name\">\n      Hello World\n    </div>\n  </mat-toolbar-row>\n</mat-toolbar>\n"
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "line": 66,
          "type": "unknown"
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 75,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 69,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 72,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "PageLayoutComponent",
      "id": "component-PageLayoutComponent-bfdcb1d25b1e84e1348048612fac3d4e",
      "file": "projects/components/src/lib/core/page-layout/page-layout.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "lib-page-layout",
      "styleUrls": ["./page-layout.component.scss"],
      "styles": [],
      "templateUrl": ["./page-layout.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-page-layout',\n  templateUrl: './page-layout.component.html',\n  styleUrls: ['./page-layout.component.scss']\n})\nexport class PageLayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".main-container {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 64px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.main-nav {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  min-width: 150px;\n  padding: 0;\n\n  .section-nav {\n    flex: 1;\n  }\n}\n\nmat-sidenav-container {\n  min-height: calc(100vh - 64px);\n}\nlib-navbar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n}\n",
          "styleUrl": "./page-layout.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"main-container\">\n  <lib-navbar></lib-navbar>\n  <mat-sidenav-container>\n    <mat-sidenav mode=\"side\" opened>\n      <ng-content select=\"[sideBar]\"></ng-content>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <ng-content></ng-content>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n"
    },
    {
      "name": "PostListComponent",
      "id": "component-PostListComponent-668c4b9be7de619d7e4678c3f963dedd",
      "file": "projects/components/src/lib/post-list/post-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "lib-post-list",
      "styleUrls": ["./post-list.component.scss"],
      "styles": [],
      "templateUrl": ["./post-list.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isLoading",
          "line": 11,
          "type": "boolean"
        },
        {
          "name": "posts",
          "line": 14,
          "type": "Post[]"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Post } from 'models';\n\n@Component({\n  selector: 'lib-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.scss']\n})\nexport class PostListComponent implements OnInit {\n  @Input()\n  isLoading: boolean;\n\n  @Input()\n  posts: Post[];\n\n  constructor() {}\n\n  ngOnInit(): void {\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./post-list.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 14
      },
      "implements": ["OnInit"],
      "templateData": "<ng-container *ngIf=\"!isLoading; else loading\">\n  <ng-container *ngIf=\"posts && posts.length > 0; else noResults\">\n    List\n  </ng-container>\n\n</ng-container>\n<ng-template #noResults>\n  No Result\n</ng-template>\n\n<ng-template #loading>\n  Loading\n</ng-template>\n"
    },
    {
      "name": "PostsComponent",
      "id": "component-PostsComponent-b2ab626496a678b5e1b876498e7e7fd8",
      "file": "src/app/features/posts/posts.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-posts",
      "styleUrls": ["./posts.component.scss"],
      "styles": [],
      "templateUrl": ["./posts.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "posts$",
          "defaultValue": "this.store.pipe(select(selectAll))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "store",
          "type": "Store<PostState>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { loadPosts } from './state/posts.actions';\nimport { PostState } from './state/posts.state';\nimport { selectAll } from './state/posts.selectors';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.scss']\n})\nexport class PostsComponent implements OnInit {\n  constructor(public store: Store<PostState>) {}\n\n  posts$ = this.store.pipe(select(selectAll));\n\n  ngOnInit(): void {\n    this.store.dispatch(loadPosts());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./posts.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "store",
            "type": "Store<PostState>"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store<PostState>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<p>posts works!</p>\n\n{{(posts$ | async) | json}}\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "CoreModule"
            },
            {
              "name": "HomeModule"
            },
            {
              "name": "MaterialModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ComponentsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ComponentsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ComponentsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CoreModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CoreModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "PageLayoutModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "HomeModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "HomeComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "MaterialModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "MaterialModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "NavbarModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "NavbarComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "MaterialModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "NavbarComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PageLayoutModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PageLayoutComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "MaterialModule"
            },
            {
              "name": "NavbarModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "PageLayoutComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PostListModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PostListComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PostsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PostsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "PostsRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PostsModule",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "PostsService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PostsRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "actionSettingsChangeTheme",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.actions.ts",
        "type": "",
        "defaultValue": "createAction('[Settings] Change Theme', props<{ theme: string }>())"
      },
      {
        "name": "base",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.actions.ts",
        "type": "string",
        "defaultValue": "'[Posts] -'"
      },
      {
        "name": "componentModules",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/lib/shared/modules/material.module.ts",
        "type": "[]",
        "defaultValue": "[\n  MatButtonModule,\n  MatProgressSpinnerModule,\n  MatMenuModule,\n  MatIconModule,\n  MatExpansionModule,\n  MatTooltipModule,\n  MatCardModule,\n  MatTableModule,\n  MatProgressBarModule,\n  MatSidenavModule,\n  MatSortModule,\n  MatCheckboxModule,\n  MatListModule,\n  MatDialogModule\n]"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/models/src/test.ts",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/data/src/test.ts",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/test.ts",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "coreEffects",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/core.state.ts",
        "type": "[]",
        "defaultValue": "[SettingsEffects]"
      },
      {
        "name": "coreReducers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/core.state.ts",
        "type": "ActionReducerMap<AppState>",
        "defaultValue": "{\n  settings: settingsReducer\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Empty",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "type": "object",
        "defaultValue": "{\n  production: true\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "type": "object",
        "defaultValue": "{\n  production: false\n}"
      },
      {
        "name": "FEATURE_NAME",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.selectors.ts",
        "type": "string",
        "defaultValue": "'posts'"
      },
      {
        "name": "getArePostsLoaded",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(getPostState, (state) => state.loaded)"
      },
      {
        "name": "getArePostsLoading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(getPostState, (state) => state.loading)"
      },
      {
        "name": "getPostState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.selectors.ts",
        "type": "",
        "defaultValue": "createFeatureSelector<PostState>(FEATURE_NAME)"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.state.ts",
        "type": "SettingsState",
        "defaultValue": "{\n  theme: 'light-theme'\n}"
      },
      {
        "name": "Large",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LOADED_CLANS_KEY",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.effects.ts",
        "type": "string",
        "defaultValue": "'clanSearch.loadedClans'"
      },
      {
        "name": "Loading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "loadPosts",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.actions.ts",
        "type": "",
        "defaultValue": "createAction(`${base} Load Posts`)"
      },
      {
        "name": "loadPostsFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.actions.ts",
        "type": "",
        "defaultValue": "createAction(`${base} load Posts Failure`, props<{ error: any }>())"
      },
      {
        "name": "loadPostsSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.actions.ts",
        "type": "",
        "defaultValue": "createAction(`${base} Load Posts Success`, props<{ posts: Post[] }>())"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "metaReducers",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/core.state.ts",
        "type": "MetaReducer[]",
        "defaultValue": "[]"
      },
      {
        "name": "PostAdapter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.state.ts",
        "type": "EntityAdapter<Post>",
        "defaultValue": "createEntityAdapter<Post>({\n  selectId: (post: Post) => post.id,\n  sortComparer: false\n})"
      },
      {
        "name": "PostInitialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.state.ts",
        "type": "PostState",
        "defaultValue": "PostAdapter.getInitialState({\n  loaded: false,\n  loading: false,\n  error: null\n})"
      },
      {
        "name": "posts",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "Post[]",
        "defaultValue": "[\n  {\n    body: '',\n    id: 0,\n    title: '',\n    userId: 0\n  },\n  {\n    body: '',\n    id: 0,\n    title: '',\n    userId: 0\n  }\n]"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "reducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.reducer.ts",
        "type": "",
        "defaultValue": "createReducer(\n  PostInitialState,\n  on(PostActions.loadPosts, (state) => ({\n    ...state,\n    loaded: false,\n    loading: true\n  })),\n  on(PostActions.loadPostsFailure, (state, { error }) => ({\n    ...state,\n    error,\n    loading: false\n  })),\n  on(PostActions.loadPostsSuccess, (state, { posts }) => {\n    return PostAdapter.upsertMany(posts, { ...state });\n  })\n)"
      },
      {
        "name": "reducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.reducer.ts",
        "type": "",
        "defaultValue": "createReducer(\n  initialState,\n  on(actionSettingsChangeTheme, (state, action) => ({ ...state, ...action }))\n)"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/test.ts",
        "type": "literal type"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/features/posts/state/posts.selectors.ts",
        "type": "",
        "defaultValue": "PostAdapter.getSelectors(getPostState)"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/data/src/test.ts",
        "type": "literal type"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "type": "literal type"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/models/src/test.ts",
        "type": "literal type"
      },
      {
        "name": "ROUTE_ANIMATIONS_ELEMENTS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/animations/route.animations.ts",
        "type": "string",
        "defaultValue": "'route-animations-elements'"
      },
      {
        "name": "routeAnimations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/animations/route.animations.ts",
        "type": "",
        "defaultValue": "trigger('routeAnimations', [transition(isRouteAnimationsPage, STEPS_PAGE)])"
      },
      {
        "name": "Secondary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "selectEffectiveTheme",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(selectTheme, (theme) => theme.toLowerCase())"
      },
      {
        "name": "selectSettings",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(selectSettingsState, (state: SettingsState) => state)"
      },
      {
        "name": "selectSettingsState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.selectors.ts",
        "type": "",
        "defaultValue": "createFeatureSelector<AppState, SettingsState>('settings')"
      },
      {
        "name": "selectTheme",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/settings/settings.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(selectSettings, (settings) => settings.theme)"
      },
      {
        "name": "Small",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "STEPS_ALL",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/animations/route.animations.ts",
        "type": "any[]",
        "defaultValue": "[\n  query(':enter > *', style({ opacity: 0, position: 'fixed' }), {\n    optional: true\n  }),\n  query(':enter .' + ROUTE_ANIMATIONS_ELEMENTS, style({ opacity: 0 }), {\n    optional: true\n  }),\n  sequence([\n    query(\n      ':leave > *',\n      [\n        style({ transform: 'translateY(0%)', opacity: 1 }),\n        animate('0.2s ease-in-out', style({ transform: 'translateY(-3%)', opacity: 0 })),\n        style({ position: 'fixed' })\n      ],\n      { optional: true }\n    ),\n    query(\n      ':enter > *',\n      [\n        style({\n          transform: 'translateY(-3%)',\n          opacity: 0,\n          position: 'static'\n        }),\n        animate('0.5s ease-in-out', style({ transform: 'translateY(0%)', opacity: 1 }))\n      ],\n      { optional: true }\n    )\n  ]),\n  query(\n    ':enter .' + ROUTE_ANIMATIONS_ELEMENTS,\n    stagger(75, [\n      style({ transform: 'translateY(10%)', opacity: 0 }),\n      animate('0.5s ease-in-out', style({ transform: 'translateY(0%)', opacity: 1 }))\n    ]),\n    { optional: true }\n  )\n]"
      },
      {
        "name": "STEPS_PAGE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/animations/route.animations.ts",
        "type": "[]",
        "defaultValue": "[STEPS_ALL[0], STEPS_ALL[2]]"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "Story<PostListComponent>",
        "defaultValue": "(args: PostListComponent) => ({\n  component: PostListComponent,\n  props: args\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "Story<Button>",
        "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "type": "Story<Header>",
        "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "type": "Story<Page>",
        "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
      }
    ],
    "functions": [
      {
        "name": "isRouteAnimationsPage",
        "file": "src/app/core/animations/route.animations.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "boolean"
      },
      {
        "name": "PostReducer",
        "file": "src/app/features/posts/state/posts.reducer.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "state"
          },
          {
            "name": "action"
          }
        ],
        "returnType": "PostState",
        "jsdoctags": [
          {
            "name": "state",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "action",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "settingsReducer",
        "file": "src/app/core/settings/settings.reducer.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "state"
          },
          {
            "name": "action"
          }
        ],
        "returnType": "SettingsState",
        "jsdoctags": [
          {
            "name": "state",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "action",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/app/core/settings/settings.actions.ts": [
        {
          "name": "actionSettingsChangeTheme",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.actions.ts",
          "type": "",
          "defaultValue": "createAction('[Settings] Change Theme', props<{ theme: string }>())"
        }
      ],
      "src/app/features/posts/state/posts.actions.ts": [
        {
          "name": "base",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.actions.ts",
          "type": "string",
          "defaultValue": "'[Posts] -'"
        },
        {
          "name": "loadPosts",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.actions.ts",
          "type": "",
          "defaultValue": "createAction(`${base} Load Posts`)"
        },
        {
          "name": "loadPostsFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.actions.ts",
          "type": "",
          "defaultValue": "createAction(`${base} load Posts Failure`, props<{ error: any }>())"
        },
        {
          "name": "loadPostsSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.actions.ts",
          "type": "",
          "defaultValue": "createAction(`${base} Load Posts Success`, props<{ posts: Post[] }>())"
        }
      ],
      "projects/components/src/lib/shared/modules/material.module.ts": [
        {
          "name": "componentModules",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/lib/shared/modules/material.module.ts",
          "type": "[]",
          "defaultValue": "[\n  MatButtonModule,\n  MatProgressSpinnerModule,\n  MatMenuModule,\n  MatIconModule,\n  MatExpansionModule,\n  MatTooltipModule,\n  MatCardModule,\n  MatTableModule,\n  MatProgressBarModule,\n  MatSidenavModule,\n  MatSortModule,\n  MatCheckboxModule,\n  MatListModule,\n  MatDialogModule\n]"
        }
      ],
      "src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "type": "literal type"
        }
      ],
      "projects/models/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/models/src/test.ts",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/models/src/test.ts",
          "type": "literal type"
        }
      ],
      "projects/data/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/data/src/test.ts",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/data/src/test.ts",
          "type": "literal type"
        }
      ],
      "projects/components/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/test.ts",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/test.ts",
          "type": "literal type"
        }
      ],
      "src/app/core/core.state.ts": [
        {
          "name": "coreEffects",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/core.state.ts",
          "type": "[]",
          "defaultValue": "[SettingsEffects]"
        },
        {
          "name": "coreReducers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/core.state.ts",
          "type": "ActionReducerMap<AppState>",
          "defaultValue": "{\n  settings: settingsReducer\n}"
        },
        {
          "name": "metaReducers",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/core.state.ts",
          "type": "MetaReducer[]",
          "defaultValue": "[]"
        }
      ],
      "projects/components/src/lib/post-list/post-list.component.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Empty",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Loading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "posts",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
          "type": "Post[]",
          "defaultValue": "[\n  {\n    body: '',\n    id: 0,\n    title: '',\n    userId: 0\n  },\n  {\n    body: '',\n    id: 0,\n    title: '',\n    userId: 0\n  }\n]"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/components/src/lib/post-list/post-list.component.stories.ts",
          "type": "Story<PostListComponent>",
          "defaultValue": "(args: PostListComponent) => ({\n  component: PostListComponent,\n  props: args\n})"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "type": "object",
          "defaultValue": "{\n  production: true\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "type": "object",
          "defaultValue": "{\n  production: false\n}"
        }
      ],
      "src/app/features/posts/state/posts.selectors.ts": [
        {
          "name": "FEATURE_NAME",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.selectors.ts",
          "type": "string",
          "defaultValue": "'posts'"
        },
        {
          "name": "getArePostsLoaded",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(getPostState, (state) => state.loaded)"
        },
        {
          "name": "getArePostsLoading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(getPostState, (state) => state.loading)"
        },
        {
          "name": "getPostState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.selectors.ts",
          "type": "",
          "defaultValue": "createFeatureSelector<PostState>(FEATURE_NAME)"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.selectors.ts",
          "type": "",
          "defaultValue": "PostAdapter.getSelectors(getPostState)"
        }
      ],
      "src/app/core/settings/settings.state.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.state.ts",
          "type": "SettingsState",
          "defaultValue": "{\n  theme: 'light-theme'\n}"
        }
      ],
      "src/stories/Button.stories.ts": [
        {
          "name": "Large",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Secondary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Small",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "Story<Button>",
          "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
        }
      ],
      "src/app/features/posts/state/posts.effects.ts": [
        {
          "name": "LOADED_CLANS_KEY",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.effects.ts",
          "type": "string",
          "defaultValue": "'clanSearch.loadedClans'"
        }
      ],
      "src/stories/Header.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "type": "Story<Header>",
          "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args\n})"
        }
      ],
      "src/stories/Page.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "type": "Story<Page>",
          "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
        }
      ],
      "src/app/features/posts/state/posts.state.ts": [
        {
          "name": "PostAdapter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.state.ts",
          "type": "EntityAdapter<Post>",
          "defaultValue": "createEntityAdapter<Post>({\n  selectId: (post: Post) => post.id,\n  sortComparer: false\n})"
        },
        {
          "name": "PostInitialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.state.ts",
          "type": "PostState",
          "defaultValue": "PostAdapter.getInitialState({\n  loaded: false,\n  loading: false,\n  error: null\n})"
        }
      ],
      "src/app/features/posts/state/posts.reducer.ts": [
        {
          "name": "reducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/features/posts/state/posts.reducer.ts",
          "type": "",
          "defaultValue": "createReducer(\n  PostInitialState,\n  on(PostActions.loadPosts, (state) => ({\n    ...state,\n    loaded: false,\n    loading: true\n  })),\n  on(PostActions.loadPostsFailure, (state, { error }) => ({\n    ...state,\n    error,\n    loading: false\n  })),\n  on(PostActions.loadPostsSuccess, (state, { posts }) => {\n    return PostAdapter.upsertMany(posts, { ...state });\n  })\n)"
        }
      ],
      "src/app/core/settings/settings.reducer.ts": [
        {
          "name": "reducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.reducer.ts",
          "type": "",
          "defaultValue": "createReducer(\n  initialState,\n  on(actionSettingsChangeTheme, (state, action) => ({ ...state, ...action }))\n)"
        }
      ],
      "src/app/core/animations/route.animations.ts": [
        {
          "name": "ROUTE_ANIMATIONS_ELEMENTS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/animations/route.animations.ts",
          "type": "string",
          "defaultValue": "'route-animations-elements'"
        },
        {
          "name": "routeAnimations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/animations/route.animations.ts",
          "type": "",
          "defaultValue": "trigger('routeAnimations', [transition(isRouteAnimationsPage, STEPS_PAGE)])"
        },
        {
          "name": "STEPS_ALL",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/animations/route.animations.ts",
          "type": "any[]",
          "defaultValue": "[\n  query(':enter > *', style({ opacity: 0, position: 'fixed' }), {\n    optional: true\n  }),\n  query(':enter .' + ROUTE_ANIMATIONS_ELEMENTS, style({ opacity: 0 }), {\n    optional: true\n  }),\n  sequence([\n    query(\n      ':leave > *',\n      [\n        style({ transform: 'translateY(0%)', opacity: 1 }),\n        animate('0.2s ease-in-out', style({ transform: 'translateY(-3%)', opacity: 0 })),\n        style({ position: 'fixed' })\n      ],\n      { optional: true }\n    ),\n    query(\n      ':enter > *',\n      [\n        style({\n          transform: 'translateY(-3%)',\n          opacity: 0,\n          position: 'static'\n        }),\n        animate('0.5s ease-in-out', style({ transform: 'translateY(0%)', opacity: 1 }))\n      ],\n      { optional: true }\n    )\n  ]),\n  query(\n    ':enter .' + ROUTE_ANIMATIONS_ELEMENTS,\n    stagger(75, [\n      style({ transform: 'translateY(10%)', opacity: 0 }),\n      animate('0.5s ease-in-out', style({ transform: 'translateY(0%)', opacity: 1 }))\n    ]),\n    { optional: true }\n  )\n]"
        },
        {
          "name": "STEPS_PAGE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/animations/route.animations.ts",
          "type": "[]",
          "defaultValue": "[STEPS_ALL[0], STEPS_ALL[2]]"
        }
      ],
      "src/app/core/settings/settings.selectors.ts": [
        {
          "name": "selectEffectiveTheme",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(selectTheme, (theme) => theme.toLowerCase())"
        },
        {
          "name": "selectSettings",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(selectSettingsState, (state: SettingsState) => state)"
        },
        {
          "name": "selectSettingsState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.selectors.ts",
          "type": "",
          "defaultValue": "createFeatureSelector<AppState, SettingsState>('settings')"
        },
        {
          "name": "selectTheme",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/settings/settings.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(selectSettings, (settings) => settings.theme)"
        }
      ]
    },
    "groupedFunctions": {
      "src/app/core/animations/route.animations.ts": [
        {
          "name": "isRouteAnimationsPage",
          "file": "src/app/core/animations/route.animations.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "boolean"
        }
      ],
      "src/app/features/posts/state/posts.reducer.ts": [
        {
          "name": "PostReducer",
          "file": "src/app/features/posts/state/posts.reducer.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "state"
            },
            {
              "name": "action"
            }
          ],
          "returnType": "PostState",
          "jsdoctags": [
            {
              "name": "state",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/app/core/settings/settings.reducer.ts": [
        {
          "name": "settingsReducer",
          "file": "src/app/core/settings/settings.reducer.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "state"
            },
            {
              "name": "action"
            }
          ],
          "returnType": "SettingsState",
          "jsdoctags": [
            {
              "name": "state",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 1,
    "status": "low",
    "files": [
      {
        "filePath": "e2e/src/app.po.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AppPage",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/components.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ComponentsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/components.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ComponentsService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/core/navbar/navbar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavbarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/core/page-layout/page-layout.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageLayoutComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Empty",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Loading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "posts",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/post-list/post-list.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/post-list/post-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PostListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/lib/shared/modules/material.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "componentModules",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/components/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/data/src/lib/posts/posts.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PostsService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "projects/data/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/data/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/models/src/lib/posts.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Post",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "projects/models/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/models/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/core/animations/route.animations.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "isRouteAnimationsPage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/animations/route.animations.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ROUTE_ANIMATIONS_ELEMENTS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/animations/route.animations.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "routeAnimations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/animations/route.animations.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "STEPS_ALL",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/animations/route.animations.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "STEPS_PAGE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/core.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "AppState",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/core/core.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "coreEffects",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/core.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "coreReducers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/core.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "metaReducers",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "actionSettingsChangeTheme",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.effects.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SettingsEffects",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.reducer.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "settingsReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "reducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectEffectiveTheme",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectSettings",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectSettingsState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "selectTheme",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SettingsState",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "State",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/core/settings/settings.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/home/home.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HomeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/posts.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PostsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "base",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPosts",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPostsFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPostsSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.effects.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LoadedClanEffects",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.effects.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LOADED_CLANS_KEY",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.reducer.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "PostReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "reducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FEATURE_NAME",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getArePostsLoaded",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getArePostsLoading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPostState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "PostState",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PostAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/features/posts/state/posts.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PostInitialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Large",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Secondary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Small",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
